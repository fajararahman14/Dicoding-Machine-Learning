# -*- coding: utf-8 -*-
"""Dicoding.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gKVgyeNrq5OBqpBpj890OBOgBluTgkBT
"""

import tensorflow as tf
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import sklearn
from sklearn.model_selection import train_test_split

#https://pypi.org/project/split-folders/
!pip install split-folders

!wget --no-check-certificate \
  https://dicodingacademy.blob.core.windows.net/picodiploma/ml_pemula_academy/rockpaperscissors.zip \
  -O /tmp/rockpaperscissors.zip

# melakukan ekstraksi pada file zip
import zipfile,os
local_zip = '/tmp/rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

os.listdir('/tmp/rockpaperscissors')

import splitfolders
data_dir = "/tmp/rockpaperscissors/rps-cv-images"
splitfolders.ratio(data_dir, output = "/tmp/rockpaperscissors", seed = 1337, ratio = (0.6, 0.4))

train_dir = os.path.join("/tmp/rockpaperscissors", "train")
val_dir = os.path.join("/tmp/rockpaperscissors", "val")

rock_dir = os.path.join(data_dir,'rock')
paper_dir = os.path.join(data_dir,'paper')
scissors_dir = os.path.join(data_dir,'scissors')

train_rock_dir = os.path.join(train_dir, 'rock')
validation_rock_dir = os.path.join(val_dir, 'rock')
train_paper_dir = os.path.join(train_dir, 'paper')
validation_paper_dir = os.path.join(val_dir, 'paper')
train_scissors_dir = os.path.join(train_dir, 'scissors')
validation_scissors_dir = os.path.join(val_dir, 'scissors')

train_rock_dir, validation_rock_dir = train_test_split(os.listdir(rock_dir), test_size = 0.4)
train_paper_dir, validation_paper_dir = train_test_split(os.listdir(paper_dir), test_size = 0.4)
train_scissors_dir, validation_scissors_dir = train_test_split(os.listdir(scissors_dir), test_size = 0.4)

train_datagen = ImageDataGenerator(
                    rescale = 1./255,
                    rotation_range = 20,
                    horizontal_flip = True,
                    shear_range = 0.2,
                    fill_mode = 'nearest'
)

test_datagen = ImageDataGenerator(
                    rescale = 1./255,
                    rotation_range = 20,
                    horizontal_flip = True,
                    shear_range = 0.2,
                    fill_mode = 'nearest'
)

batchSize = 32
imgSize = 150
train_gen = train_datagen.flow_from_directory(
    train_dir,
    target_size=(imgSize,imgSize),
    batch_size= batchSize,
    class_mode='categorical'
)

validation_gen = test_datagen.flow_from_directory(
    val_dir,
    target_size = (imgSize,imgSize),
    batch_size = batchSize,
    class_mode = 'categorical'
)

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(25, (3,3), activation='relu', input_shape=(imgSize, imgSize, 3)),
    tf.keras.layers.MaxPooling2D((2, 2),padding='same'),
    tf.keras.layers.Conv2D(50, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(75, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(100, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(500, activation='relu'),
    tf.keras.layers.Dense(250, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

model.compile(loss='categorical_crossentropy',
              optimizer = 'adam',
              metrics = ['accuracy'])

history = model.fit(
    train_gen,
    steps_per_epoch = 41, # 1312 images = batch_size * steps
    epochs = 20,
    validation_data = validation_gen,
    validation_steps = 27, # 876 images = batch_size * steps
    verbose =2,
)

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline

uploaded = files.upload()

for fn in uploaded.keys():

    path = fn
    img = image.load_img(path, target_size = (imgSize,imgSize))
    imgplot = plt.imshow(img)
    x = image.img_to_array(img)
    x = np.expand_dims(x, axis=0)

    images = np.vstack([x])
    classes = model.predict(images, batch_size = 10)
    
    print(fn)

    if classes[0][0] ==1:
        print('Paper')

    elif classes [0][1] ==1:
        print('Rock')

    else:
        print('Scissors')